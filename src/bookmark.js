import storage from './core/storage'

const bookmark = {
    htmlBookmarkBar: window.bookmark_bar,
    htmlMenu: window.bookmarkContextMenu,
}

/**
* Create bookmark item from bookmark nodes
* @param  {Object} node
* @return {string}      HTML generated by bookmark node
*/
bookmark.createItem = (node) => {
    const { url, title, children } = node
    if (children) {
        setTimeout(() => bookmark.render(node))
        return ''
    }
    
    return `
    <a class="item" href="${url}">
        <img src="chrome://favicon/${url}">
        <div class="title">${title}</div>
    </a>`
}

/**
* Create a parent of bookmark, this is a group of bookmark items
* @param  {Object} node
* @return {string}      HTML generated by bookmark nodes
*/
bookmark.createParent = (node) => {
    const label = node.title
    const nodes = node.children
    const childs = nodes.map(node => bookmark.createItem(node)).join('')
    const parentId = `${label}-${node.parentId || 'root'}`
    const status = storage[`bookmark:parent:${parentId}`] || 'open'
    
    return `
    <div class="parent ${status}">
        <div class="parent-header" data-parent-id="${parentId}">
            <span class="icon icon-folder"></span>
            <div class="label">${label}</div>
        </div>
        <div class="stopgrap"></div>
        <div class="parent-childs">${childs}</div>
    </div>`
}

/**
* Render bookmark from bookmark node
* @param  {Object}  node
* @param  {Boolean} [clear=false] clean bookmark bar before render
*/
bookmark.render = (node, clear=false) => {
    if (clear) bookmark.htmlBookmarkBar.innerHTML = ''
    bookmark.htmlBookmarkBar.innerHTML += bookmark.createParent(node)
}

/**
* ToggleOpenParent
* @param  {string} parentId
*/
bookmark.toggleOpenParent = (parentId) => {
    // set config
    const key = `bookmark:parent:${parentId}`
    const open = storage[key] === 'close'? 'open' : 'close'
    storage[key] = open
    
    // change style bookmark parent
    document.querySelector(`[data-parent-id="${parentId}"]`).parentNode.className = `parent ${open}`
}

bookmark.htmlBookmarkBar.addEventListener('click', event => {
    const { target } = event
    
    // detect toggle parent
    const parentId = target.getAttribute('data-parent-id') || target.parentNode.getAttribute('data-parent-id')
    if (parentId) bookmark.toggleOpenParent(parentId)
})

export default bookmark